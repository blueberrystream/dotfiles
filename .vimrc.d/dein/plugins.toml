# basic
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'kana/vim-fakeclip'

[[plugins]]
repo = 'nazo/pt.vim'

# file
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let NERDTreeShowHidden = 1
  nnoremap <silent> <F6> :NERDTreeFind<CR>
  nnoremap <silent> <F7> :NERDTreeToggle<CR>
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
depends = ['nerdtree']

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  nnoremap <silent> <F8> :TagbarToggle<CR>
'''

# assist
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'Raimondi/delimitMate'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertCharPre'
depends = ['context_filetype.vim']
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 0
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#enable_camel_case = 0
  let g:deoplete#enable_ignore_case = 0
  let g:deoplete#enable_refresh_always = 1
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#file#enable_buffer_path = 1
  let g:deoplete#max_list = 10000
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neco-syntax'
depends = ['deoplete.nvim']

# git
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set signcolumn=yes
  set updatetime=250
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-rhubarb'
depends = ['vim-fugitive']

# style
[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  syntax enable
  set background=dark
  colorscheme solarized
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  set laststatus=2
  let g:lightline = { 'colorscheme': 'solarized' }
'''

[[plugins]]
repo = 'miyakogi/seiya.vim'
hook_add = '''
  let g:seiya_auto_enable = 1
'''

# formatting
[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_set_loclist = 1
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 1
  let g:ale_keep_list_window_open = 0
  let g:ale_echo_msg_error_str = '×'
  let g:ale_echo_msg_warning_str = '▲'
  let g:ale_echo_msg_info_str = '※'
  let g:ale_echo_msg_format = '%severity% %linter% - %s'
  let g:ale_statusline_format = ['×%d', '▲%d', '✅']
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = g:ale_echo_msg_error_str
  let g:ale_sign_warning = g:ale_echo_msg_warning_str
  let g:ale_javascript_prettier_use_local_config = 1
  let g:ale_php_phpcs_standard = 'PSR1,PSR2'
  let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \   'javascript': ['prettier-eslint'],
    \   'ruby': ['prettier', 'rubocop'],
    \ }
  let g:ale_fix_on_save = 1
  let g:ale_completion_enabled = 1
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
  let g:lightline.component_expand = {
    \   'linter_checking': 'lightline#ale#checking',
    \   'linter_warnings': 'lightline#ale#warnings',
    \   'linter_errors': 'lightline#ale#errors',
    \   'linter_ok': 'lightline#ale#ok',
    \ }
  let g:lightline.component_type = {
    \   'linter_checking': 'left',
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \   'linter_ok': 'left',
    \ }
  let g:lightline.active = { 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]] }
  let g:lightline#ale#indicator_checking = '⏳'
  let g:lightline#ale#indicator_warnings = "▲"
  let g:lightline#ale#indicator_errors = "×"
  let g:lightline#ale#indicator_ok = "✅"
'''

# ruby
[[plugins]]
repo = 'tpope/vim-endwise'

# rails
[[plugins]]
repo = 'tpope/vim-rails'

[[plugins]]
repo = 'ujihisa/unite-rake'

[[plugins]]
repo = 'basyura/unite-rails'

# slim
[[plugins]]
repo = 'slim-template/vim-slim'
hook_add = '''
  autocmd BufRead,BufNewFile *.slim setfiletype slim
'''

# php
[[plugins]]
repo = 'beyondwords/vim-twig'

[[plugins]]
repo = 'jwalton512/vim-blade'

# json
[[plugins]]
repo = 'elzr/vim-json'

# Dockerfile
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

# scala
[[plugins]]
repo = 'derekwyatt/vim-scala'

# handlebars
[[plugins]]
repo = 'mustache/vim-mustache-handlebars'

# vue
[[plugins]]
repo = 'posva/vim-vue'

# markdown
[[plugins]]
repo = 'gabrielelana/vim-markdown'
depends = ['godlygeek/tabular']
hook_add = '''
  let g:markdown_enable_spell_checking = 0
'''

[[plugins]]
repo = 'godlygeek/tabular'

# toml
[[plugins]]
repo = 'cespare/vim-toml'

# typescript
[[plugins]]
repo = 'leafgarland/typescript-vim'

# pug
[[plugins]]
repo = 'digitaltoad/vim-pug'

# elixir
[[plugins]]
repo = 'elixir-lang/vim-elixir'
